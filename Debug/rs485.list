
rs485.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003994  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003aa0  08003aa0  00013aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ae8  08003ae8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ae8  08003ae8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ae8  08003ae8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ae8  08003ae8  00013ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003aec  08003aec  00013aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003af0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  08003afc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  08003afc  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c750  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a96  00000000  00000000  0002c785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  0002ee18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167e3  00000000  00000000  0002f978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb8a  00000000  00000000  0004615b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842b0  00000000  00000000  00052ce5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d6f95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003214  00000000  00000000  000d6fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003a88 	.word	0x08003a88

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003a88 	.word	0x08003a88

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t str[]= "USART Transmit\r\n";
 8000152:	4b23      	ldr	r3, [pc, #140]	; (80001e0 <main+0x94>)
 8000154:	f107 040c 	add.w	r4, r7, #12
 8000158:	461d      	mov	r5, r3
 800015a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800015c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800015e:	682b      	ldr	r3, [r5, #0]
 8000160:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 fbf1 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f84b 	bl	8000200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f9c7 	bl	80004fc <MX_GPIO_Init>
  MX_TIM2_Init();
 800016e:	f000 f889 	bl	8000284 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000172:	f000 f96f 	bl	8000454 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000176:	f000 f997 	bl	80004a8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800017a:	f000 f8d1 	bl	8000320 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t str1[]= "read1\r\n";
 800017e:	4a19      	ldr	r2, [pc, #100]	; (80001e4 <main+0x98>)
 8000180:	1d3b      	adds	r3, r7, #4
 8000182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000186:	e883 0003 	stmia.w	r3, {r0, r1}
  HAL_UART_Transmit(&huart1,str1,7,0xFFFF);
 800018a:	1d39      	adds	r1, r7, #4
 800018c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000190:	2207      	movs	r2, #7
 8000192:	4815      	ldr	r0, [pc, #84]	; (80001e8 <main+0x9c>)
 8000194:	f002 fe78 	bl	8002e88 <HAL_UART_Transmit>

  HAL_TIM_Base_Start(&htim3);
 8000198:	4814      	ldr	r0, [pc, #80]	; (80001ec <main+0xa0>)
 800019a:	f001 fc0f 	bl	80019bc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800019e:	4813      	ldr	r0, [pc, #76]	; (80001ec <main+0xa0>)
 80001a0:	f001 fc50 	bl	8001a44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80001a4:	2104      	movs	r1, #4
 80001a6:	4811      	ldr	r0, [pc, #68]	; (80001ec <main+0xa0>)
 80001a8:	f001 fcf0 	bl	8001b8c <HAL_TIM_PWM_Start>
  TIM3->CCR2=300000;
 80001ac:	4b10      	ldr	r3, [pc, #64]	; (80001f0 <main+0xa4>)
 80001ae:	4a11      	ldr	r2, [pc, #68]	; (80001f4 <main+0xa8>)
 80001b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80001b2:	2201      	movs	r2, #1
 80001b4:	2101      	movs	r1, #1
 80001b6:	4810      	ldr	r0, [pc, #64]	; (80001f8 <main+0xac>)
 80001b8:	f000 ff88 	bl	80010cc <HAL_GPIO_WritePin>
	  HAL_UART_Transmit(&huart2,str,16,0xFFFF);
 80001bc:	f107 010c 	add.w	r1, r7, #12
 80001c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80001c4:	2210      	movs	r2, #16
 80001c6:	480d      	ldr	r0, [pc, #52]	; (80001fc <main+0xb0>)
 80001c8:	f002 fe5e 	bl	8002e88 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2101      	movs	r1, #1
 80001d0:	4809      	ldr	r0, [pc, #36]	; (80001f8 <main+0xac>)
 80001d2:	f000 ff7b 	bl	80010cc <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80001d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001da:	f000 fc17 	bl	8000a0c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80001de:	e7e8      	b.n	80001b2 <main+0x66>
 80001e0:	08003aa0 	.word	0x08003aa0
 80001e4:	08003ab4 	.word	0x08003ab4
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	20000070 	.word	0x20000070
 80001f0:	40000400 	.word	0x40000400
 80001f4:	000493e0 	.word	0x000493e0
 80001f8:	40010800 	.word	0x40010800
 80001fc:	20000100 	.word	0x20000100

08000200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b090      	sub	sp, #64	; 0x40
 8000204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000206:	f107 0318 	add.w	r3, r7, #24
 800020a:	2228      	movs	r2, #40	; 0x28
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f003 fc32 	bl	8003a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000222:	2302      	movs	r3, #2
 8000224:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000226:	2301      	movs	r3, #1
 8000228:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800022a:	2310      	movs	r3, #16
 800022c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800022e:	2302      	movs	r3, #2
 8000230:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000232:	2300      	movs	r3, #0
 8000234:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000236:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800023a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	4618      	mov	r0, r3
 8000242:	f000 ff5b 	bl	80010fc <HAL_RCC_OscConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800024c:	f000 f9aa 	bl	80005a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000250:	230f      	movs	r3, #15
 8000252:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000254:	2302      	movs	r3, #2
 8000256:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000258:	2300      	movs	r3, #0
 800025a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800025c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000260:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2102      	movs	r1, #2
 800026a:	4618      	mov	r0, r3
 800026c:	f001 f9c8 	bl	8001600 <HAL_RCC_ClockConfig>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000276:	f000 f995 	bl	80005a4 <Error_Handler>
  }
}
 800027a:	bf00      	nop
 800027c:	3740      	adds	r7, #64	; 0x40
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800028a:	f107 030c 	add.w	r3, r7, #12
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]
 80002a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002a2:	4b1e      	ldr	r3, [pc, #120]	; (800031c <MX_TIM2_Init+0x98>)
 80002a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80002aa:	4b1c      	ldr	r3, [pc, #112]	; (800031c <MX_TIM2_Init+0x98>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002b0:	4b1a      	ldr	r3, [pc, #104]	; (800031c <MX_TIM2_Init+0x98>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 12288;
 80002b6:	4b19      	ldr	r3, [pc, #100]	; (800031c <MX_TIM2_Init+0x98>)
 80002b8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80002bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002be:	4b17      	ldr	r3, [pc, #92]	; (800031c <MX_TIM2_Init+0x98>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002c4:	4b15      	ldr	r3, [pc, #84]	; (800031c <MX_TIM2_Init+0x98>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002ca:	4814      	ldr	r0, [pc, #80]	; (800031c <MX_TIM2_Init+0x98>)
 80002cc:	f001 fb26 	bl	800191c <HAL_TIM_Base_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80002d6:	f000 f965 	bl	80005a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80002da:	2307      	movs	r3, #7
 80002dc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80002e2:	f107 030c 	add.w	r3, r7, #12
 80002e6:	4619      	mov	r1, r3
 80002e8:	480c      	ldr	r0, [pc, #48]	; (800031c <MX_TIM2_Init+0x98>)
 80002ea:	f002 f870 	bl	80023ce <HAL_TIM_SlaveConfigSynchro>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80002f4:	f000 f956 	bl	80005a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002f8:	2300      	movs	r3, #0
 80002fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002fc:	2300      	movs	r3, #0
 80002fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	4619      	mov	r1, r3
 8000304:	4805      	ldr	r0, [pc, #20]	; (800031c <MX_TIM2_Init+0x98>)
 8000306:	f002 fd05 	bl	8002d14 <HAL_TIMEx_MasterConfigSynchronization>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000310:	f000 f948 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000314:	bf00      	nop
 8000316:	3720      	adds	r7, #32
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000028 	.word	0x20000028

08000320 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b092      	sub	sp, #72	; 0x48
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000326:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800032a:	2200      	movs	r2, #0
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	605a      	str	r2, [r3, #4]
 8000330:	609a      	str	r2, [r3, #8]
 8000332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000334:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
 800033c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800033e:	f107 0320 	add.w	r3, r7, #32
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800034c:	1d3b      	adds	r3, r7, #4
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]
 800035a:	615a      	str	r2, [r3, #20]
 800035c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800035e:	4b3b      	ldr	r3, [pc, #236]	; (800044c <MX_TIM3_Init+0x12c>)
 8000360:	4a3b      	ldr	r2, [pc, #236]	; (8000450 <MX_TIM3_Init+0x130>)
 8000362:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000364:	4b39      	ldr	r3, [pc, #228]	; (800044c <MX_TIM3_Init+0x12c>)
 8000366:	2200      	movs	r2, #0
 8000368:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036a:	4b38      	ldr	r3, [pc, #224]	; (800044c <MX_TIM3_Init+0x12c>)
 800036c:	2200      	movs	r2, #0
 800036e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000370:	4b36      	ldr	r3, [pc, #216]	; (800044c <MX_TIM3_Init+0x12c>)
 8000372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000376:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000378:	4b34      	ldr	r3, [pc, #208]	; (800044c <MX_TIM3_Init+0x12c>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800037e:	4b33      	ldr	r3, [pc, #204]	; (800044c <MX_TIM3_Init+0x12c>)
 8000380:	2200      	movs	r2, #0
 8000382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000384:	4831      	ldr	r0, [pc, #196]	; (800044c <MX_TIM3_Init+0x12c>)
 8000386:	f001 fac9 	bl	800191c <HAL_TIM_Base_Init>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000390:	f000 f908 	bl	80005a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000398:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800039a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800039e:	4619      	mov	r1, r3
 80003a0:	482a      	ldr	r0, [pc, #168]	; (800044c <MX_TIM3_Init+0x12c>)
 80003a2:	f001 ff4d 	bl	8002240 <HAL_TIM_ConfigClockSource>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80003ac:	f000 f8fa 	bl	80005a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80003b0:	4826      	ldr	r0, [pc, #152]	; (800044c <MX_TIM3_Init+0x12c>)
 80003b2:	f001 fc87 	bl	8001cc4 <HAL_TIM_IC_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 80003bc:	f000 f8f2 	bl	80005a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003c0:	4822      	ldr	r0, [pc, #136]	; (800044c <MX_TIM3_Init+0x12c>)
 80003c2:	f001 fb8b 	bl	8001adc <HAL_TIM_PWM_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80003cc:	f000 f8ea 	bl	80005a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d0:	2300      	movs	r3, #0
 80003d2:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003d4:	2300      	movs	r3, #0
 80003d6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003dc:	4619      	mov	r1, r3
 80003de:	481b      	ldr	r0, [pc, #108]	; (800044c <MX_TIM3_Init+0x12c>)
 80003e0:	f002 fc98 	bl	8002d14 <HAL_TIMEx_MasterConfigSynchronization>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 80003ea:	f000 f8db 	bl	80005a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80003ee:	2300      	movs	r3, #0
 80003f0:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80003f2:	2301      	movs	r3, #1
 80003f4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80003fe:	f107 0320 	add.w	r3, r7, #32
 8000402:	2200      	movs	r2, #0
 8000404:	4619      	mov	r1, r3
 8000406:	4811      	ldr	r0, [pc, #68]	; (800044c <MX_TIM3_Init+0x12c>)
 8000408:	f001 fdbc 	bl	8001f84 <HAL_TIM_IC_ConfigChannel>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8000412:	f000 f8c7 	bl	80005a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000416:	2360      	movs	r3, #96	; 0x60
 8000418:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800041e:	2300      	movs	r3, #0
 8000420:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2204      	movs	r2, #4
 800042a:	4619      	mov	r1, r3
 800042c:	4807      	ldr	r0, [pc, #28]	; (800044c <MX_TIM3_Init+0x12c>)
 800042e:	f001 fe45 	bl	80020bc <HAL_TIM_PWM_ConfigChannel>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8000438:	f000 f8b4 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800043c:	4803      	ldr	r0, [pc, #12]	; (800044c <MX_TIM3_Init+0x12c>)
 800043e:	f000 f939 	bl	80006b4 <HAL_TIM_MspPostInit>

}
 8000442:	bf00      	nop
 8000444:	3748      	adds	r7, #72	; 0x48
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000070 	.word	0x20000070
 8000450:	40000400 	.word	0x40000400

08000454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000458:	4b11      	ldr	r3, [pc, #68]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800045a:	4a12      	ldr	r2, [pc, #72]	; (80004a4 <MX_USART1_UART_Init+0x50>)
 800045c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800045e:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000466:	4b0e      	ldr	r3, [pc, #56]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800046c:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800046e:	2200      	movs	r2, #0
 8000470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000472:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000474:	2200      	movs	r2, #0
 8000476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000478:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800047a:	220c      	movs	r2, #12
 800047c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800047e:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000480:	2200      	movs	r2, #0
 8000482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 8000486:	2200      	movs	r2, #0
 8000488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800048a:	4805      	ldr	r0, [pc, #20]	; (80004a0 <MX_USART1_UART_Init+0x4c>)
 800048c:	f002 fcac 	bl	8002de8 <HAL_UART_Init>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000496:	f000 f885 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	200000b8 	.word	0x200000b8
 80004a4:	40013800 	.word	0x40013800

080004a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004ac:	4b11      	ldr	r3, [pc, #68]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004ae:	4a12      	ldr	r2, [pc, #72]	; (80004f8 <MX_USART2_UART_Init+0x50>)
 80004b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80004b2:	4b10      	ldr	r3, [pc, #64]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004ce:	220c      	movs	r2, #12
 80004d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004de:	4805      	ldr	r0, [pc, #20]	; (80004f4 <MX_USART2_UART_Init+0x4c>)
 80004e0:	f002 fc82 	bl	8002de8 <HAL_UART_Init>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004ea:	f000 f85b 	bl	80005a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	20000100 	.word	0x20000100
 80004f8:	40004400 	.word	0x40004400

080004fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b086      	sub	sp, #24
 8000500:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0308 	add.w	r3, r7, #8
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b21      	ldr	r3, [pc, #132]	; (8000598 <MX_GPIO_Init+0x9c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a20      	ldr	r2, [pc, #128]	; (8000598 <MX_GPIO_Init+0x9c>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <MX_GPIO_Init+0x9c>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000528:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <MX_GPIO_Init+0x9c>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a1a      	ldr	r2, [pc, #104]	; (8000598 <MX_GPIO_Init+0x9c>)
 800052e:	f043 0308 	orr.w	r3, r3, #8
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <MX_GPIO_Init+0x9c>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0308 	and.w	r3, r3, #8
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2101      	movs	r1, #1
 8000544:	4815      	ldr	r0, [pc, #84]	; (800059c <MX_GPIO_Init+0xa0>)
 8000546:	f000 fdc1 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000550:	4813      	ldr	r0, [pc, #76]	; (80005a0 <MX_GPIO_Init+0xa4>)
 8000552:	f000 fdbb 	bl	80010cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000556:	2301      	movs	r3, #1
 8000558:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800055a:	2301      	movs	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800055e:	2302      	movs	r3, #2
 8000560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	2302      	movs	r3, #2
 8000564:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000566:	f107 0308 	add.w	r3, r7, #8
 800056a:	4619      	mov	r1, r3
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <MX_GPIO_Init+0xa0>)
 800056e:	f000 fc31 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000576:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800057c:	2302      	movs	r3, #2
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2302      	movs	r3, #2
 8000582:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000584:	f107 0308 	add.w	r3, r7, #8
 8000588:	4619      	mov	r1, r3
 800058a:	4805      	ldr	r0, [pc, #20]	; (80005a0 <MX_GPIO_Init+0xa4>)
 800058c:	f000 fc22 	bl	8000dd4 <HAL_GPIO_Init>

}
 8000590:	bf00      	nop
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40021000 	.word	0x40021000
 800059c:	40010800 	.word	0x40010800
 80005a0:	40010c00 	.word	0x40010c00

080005a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
}
 80005aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005ac:	e7fe      	b.n	80005ac <Error_Handler+0x8>
	...

080005b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_MspInit+0x40>)
 80005b8:	699b      	ldr	r3, [r3, #24]
 80005ba:	4a0d      	ldr	r2, [pc, #52]	; (80005f0 <HAL_MspInit+0x40>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6193      	str	r3, [r2, #24]
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <HAL_MspInit+0x40>)
 80005c4:	699b      	ldr	r3, [r3, #24]
 80005c6:	f003 0301 	and.w	r3, r3, #1
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <HAL_MspInit+0x40>)
 80005d0:	69db      	ldr	r3, [r3, #28]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <HAL_MspInit+0x40>)
 80005d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d8:	61d3      	str	r3, [r2, #28]
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <HAL_MspInit+0x40>)
 80005dc:	69db      	ldr	r3, [r3, #28]
 80005de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e2:	603b      	str	r3, [r7, #0]
 80005e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	bf00      	nop
 80005e8:	370c      	adds	r7, #12
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	40021000 	.word	0x40021000

080005f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0318 	add.w	r3, r7, #24
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000612:	d114      	bne.n	800063e <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <HAL_TIM_Base_MspInit+0xb4>)
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	4a23      	ldr	r2, [pc, #140]	; (80006a8 <HAL_TIM_Base_MspInit+0xb4>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	61d3      	str	r3, [r2, #28]
 8000620:	4b21      	ldr	r3, [pc, #132]	; (80006a8 <HAL_TIM_Base_MspInit+0xb4>)
 8000622:	69db      	ldr	r3, [r3, #28]
 8000624:	f003 0301 	and.w	r3, r3, #1
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2100      	movs	r1, #0
 8000630:	201c      	movs	r0, #28
 8000632:	f000 fae6 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000636:	201c      	movs	r0, #28
 8000638:	f000 faff 	bl	8000c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800063c:	e030      	b.n	80006a0 <HAL_TIM_Base_MspInit+0xac>
  else if(htim_base->Instance==TIM3)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a1a      	ldr	r2, [pc, #104]	; (80006ac <HAL_TIM_Base_MspInit+0xb8>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d12b      	bne.n	80006a0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000648:	4b17      	ldr	r3, [pc, #92]	; (80006a8 <HAL_TIM_Base_MspInit+0xb4>)
 800064a:	69db      	ldr	r3, [r3, #28]
 800064c:	4a16      	ldr	r2, [pc, #88]	; (80006a8 <HAL_TIM_Base_MspInit+0xb4>)
 800064e:	f043 0302 	orr.w	r3, r3, #2
 8000652:	61d3      	str	r3, [r2, #28]
 8000654:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <HAL_TIM_Base_MspInit+0xb4>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	f003 0302 	and.w	r3, r3, #2
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000660:	4b11      	ldr	r3, [pc, #68]	; (80006a8 <HAL_TIM_Base_MspInit+0xb4>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a10      	ldr	r2, [pc, #64]	; (80006a8 <HAL_TIM_Base_MspInit+0xb4>)
 8000666:	f043 0304 	orr.w	r3, r3, #4
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <HAL_TIM_Base_MspInit+0xb4>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0304 	and.w	r3, r3, #4
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000678:	2340      	movs	r3, #64	; 0x40
 800067a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067c:	2300      	movs	r3, #0
 800067e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000684:	f107 0318 	add.w	r3, r7, #24
 8000688:	4619      	mov	r1, r3
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <HAL_TIM_Base_MspInit+0xbc>)
 800068c:	f000 fba2 	bl	8000dd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	201d      	movs	r0, #29
 8000696:	f000 fab4 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800069a:	201d      	movs	r0, #29
 800069c:	f000 facd 	bl	8000c3a <HAL_NVIC_EnableIRQ>
}
 80006a0:	bf00      	nop
 80006a2:	3728      	adds	r7, #40	; 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40000400 	.word	0x40000400
 80006b0:	40010800 	.word	0x40010800

080006b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a0f      	ldr	r2, [pc, #60]	; (800070c <HAL_TIM_MspPostInit+0x58>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d117      	bne.n	8000704 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <HAL_TIM_MspPostInit+0x5c>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <HAL_TIM_MspPostInit+0x5c>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <HAL_TIM_MspPostInit+0x5c>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f4:	2303      	movs	r3, #3
 80006f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4619      	mov	r1, r3
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <HAL_TIM_MspPostInit+0x60>)
 8000700:	f000 fb68 	bl	8000dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40000400 	.word	0x40000400
 8000710:	40021000 	.word	0x40021000
 8000714:	40010800 	.word	0x40010800

08000718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 0318 	add.w	r3, r7, #24
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a3f      	ldr	r2, [pc, #252]	; (8000830 <HAL_UART_MspInit+0x118>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d13a      	bne.n	80007ae <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000738:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <HAL_UART_MspInit+0x11c>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a3d      	ldr	r2, [pc, #244]	; (8000834 <HAL_UART_MspInit+0x11c>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b3b      	ldr	r3, [pc, #236]	; (8000834 <HAL_UART_MspInit+0x11c>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	4b38      	ldr	r3, [pc, #224]	; (8000834 <HAL_UART_MspInit+0x11c>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a37      	ldr	r2, [pc, #220]	; (8000834 <HAL_UART_MspInit+0x11c>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b35      	ldr	r3, [pc, #212]	; (8000834 <HAL_UART_MspInit+0x11c>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0304 	and.w	r3, r3, #4
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800076c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800076e:	2302      	movs	r3, #2
 8000770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000772:	2303      	movs	r3, #3
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 0318 	add.w	r3, r7, #24
 800077a:	4619      	mov	r1, r3
 800077c:	482e      	ldr	r0, [pc, #184]	; (8000838 <HAL_UART_MspInit+0x120>)
 800077e:	f000 fb29 	bl	8000dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0318 	add.w	r3, r7, #24
 8000794:	4619      	mov	r1, r3
 8000796:	4828      	ldr	r0, [pc, #160]	; (8000838 <HAL_UART_MspInit+0x120>)
 8000798:	f000 fb1c 	bl	8000dd4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	2025      	movs	r0, #37	; 0x25
 80007a2:	f000 fa2e 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007a6:	2025      	movs	r0, #37	; 0x25
 80007a8:	f000 fa47 	bl	8000c3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007ac:	e03c      	b.n	8000828 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a22      	ldr	r2, [pc, #136]	; (800083c <HAL_UART_MspInit+0x124>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d137      	bne.n	8000828 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <HAL_UART_MspInit+0x11c>)
 80007ba:	69db      	ldr	r3, [r3, #28]
 80007bc:	4a1d      	ldr	r2, [pc, #116]	; (8000834 <HAL_UART_MspInit+0x11c>)
 80007be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007c2:	61d3      	str	r3, [r2, #28]
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <HAL_UART_MspInit+0x11c>)
 80007c6:	69db      	ldr	r3, [r3, #28]
 80007c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <HAL_UART_MspInit+0x11c>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a17      	ldr	r2, [pc, #92]	; (8000834 <HAL_UART_MspInit+0x11c>)
 80007d6:	f043 0304 	orr.w	r3, r3, #4
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b15      	ldr	r3, [pc, #84]	; (8000834 <HAL_UART_MspInit+0x11c>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0304 	and.w	r3, r3, #4
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007e8:	2304      	movs	r3, #4
 80007ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0318 	add.w	r3, r7, #24
 80007f8:	4619      	mov	r1, r3
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <HAL_UART_MspInit+0x120>)
 80007fc:	f000 faea 	bl	8000dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000800:	2308      	movs	r3, #8
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080c:	f107 0318 	add.w	r3, r7, #24
 8000810:	4619      	mov	r1, r3
 8000812:	4809      	ldr	r0, [pc, #36]	; (8000838 <HAL_UART_MspInit+0x120>)
 8000814:	f000 fade 	bl	8000dd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000818:	2200      	movs	r2, #0
 800081a:	2100      	movs	r1, #0
 800081c:	2026      	movs	r0, #38	; 0x26
 800081e:	f000 f9f0 	bl	8000c02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000822:	2026      	movs	r0, #38	; 0x26
 8000824:	f000 fa09 	bl	8000c3a <HAL_NVIC_EnableIRQ>
}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40013800 	.word	0x40013800
 8000834:	40021000 	.word	0x40021000
 8000838:	40010800 	.word	0x40010800
 800083c:	40004400 	.word	0x40004400

08000840 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <NMI_Handler+0x4>

08000846 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <HardFault_Handler+0x4>

0800084c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <MemManage_Handler+0x4>

08000852 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <BusFault_Handler+0x4>

08000858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800085c:	e7fe      	b.n	800085c <UsageFault_Handler+0x4>

0800085e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	46bd      	mov	sp, r7
 8000866:	bc80      	pop	{r7}
 8000868:	4770      	bx	lr

0800086a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr

08000876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000886:	f000 f8a5 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
	...

08000890 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000894:	4802      	ldr	r0, [pc, #8]	; (80008a0 <TIM2_IRQHandler+0x10>)
 8000896:	f001 fa6d 	bl	8001d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  /* USER CODE END TIM2_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000028 	.word	0x20000028

080008a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <TIM3_IRQHandler+0x1c>)
 80008aa:	f001 fa63 	bl	8001d74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <TIM3_IRQHandler+0x20>)
 80008b6:	f000 fc09 	bl	80010cc <HAL_GPIO_WritePin>

  /* USER CODE END TIM3_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000070 	.word	0x20000070
 80008c4:	40010c00 	.word	0x40010c00

080008c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <USART1_IRQHandler+0x10>)
 80008ce:	f002 fb5f 	bl	8002f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000b8 	.word	0x200000b8

080008dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <USART2_IRQHandler+0x10>)
 80008e2:	f002 fb55 	bl	8002f90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000100 	.word	0x20000100

080008f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008fc:	f7ff fff8 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480b      	ldr	r0, [pc, #44]	; (8000930 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000902:	490c      	ldr	r1, [pc, #48]	; (8000934 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000918:	4c09      	ldr	r4, [pc, #36]	; (8000940 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000926:	f003 f883 	bl	8003a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fc0f 	bl	800014c <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000938:	08003af0 	.word	0x08003af0
  ldr r2, =_sbss
 800093c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000940:	2000014c 	.word	0x2000014c

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f947 	bl	8000bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fe24 	bl	80005b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f95f 	bl	8000c56 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f927 	bl	8000c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <HAL_IncTick+0x1c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a03      	ldr	r2, [pc, #12]	; (80009f4 <HAL_IncTick+0x20>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	20000008 	.word	0x20000008
 80009f4:	20000148 	.word	0x20000148

080009f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return uwTick;
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_GetTick+0x10>)
 80009fe:	681b      	ldr	r3, [r3, #0]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	20000148 	.word	0x20000148

08000a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a14:	f7ff fff0 	bl	80009f8 <HAL_GetTick>
 8000a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a24:	d005      	beq.n	8000a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_Delay+0x44>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	4413      	add	r3, r2
 8000a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a32:	bf00      	nop
 8000a34:	f7ff ffe0 	bl	80009f8 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d8f7      	bhi.n	8000a34 <HAL_Delay+0x28>
  {
  }
}
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000008 	.word	0x20000008

08000a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a70:	4013      	ands	r3, r2
 8000a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a86:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <__NVIC_SetPriorityGrouping+0x44>)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	60d3      	str	r3, [r2, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	0a1b      	lsrs	r3, r3, #8
 8000aa6:	f003 0307 	and.w	r3, r3, #7
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	db0b      	blt.n	8000ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	f003 021f 	and.w	r2, r3, #31
 8000ad0:	4906      	ldr	r1, [pc, #24]	; (8000aec <__NVIC_EnableIRQ+0x34>)
 8000ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad6:	095b      	lsrs	r3, r3, #5
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	370c      	adds	r7, #12
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
         );
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb8:	d301      	bcc.n	8000bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00f      	b.n	8000bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <SysTick_Config+0x40>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc6:	210f      	movs	r1, #15
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f7ff ff90 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x40>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x40>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff ff2d 	bl	8000a54 <__NVIC_SetPriorityGrouping>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b086      	sub	sp, #24
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	4603      	mov	r3, r0
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c14:	f7ff ff42 	bl	8000a9c <__NVIC_GetPriorityGrouping>
 8000c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	68b9      	ldr	r1, [r7, #8]
 8000c1e:	6978      	ldr	r0, [r7, #20]
 8000c20:	f7ff ff90 	bl	8000b44 <NVIC_EncodePriority>
 8000c24:	4602      	mov	r2, r0
 8000c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ff5f 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff35 	bl	8000ab8 <__NVIC_EnableIRQ>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffa2 	bl	8000ba8 <SysTick_Config>
 8000c64:	4603      	mov	r3, r0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b085      	sub	sp, #20
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d008      	beq.n	8000c98 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2204      	movs	r2, #4
 8000c8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e020      	b.n	8000cda <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 020e 	bic.w	r2, r2, #14
 8000ca6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 0201 	bic.w	r2, r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3714      	adds	r7, #20
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d005      	beq.n	8000d08 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2204      	movs	r2, #4
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	73fb      	strb	r3, [r7, #15]
 8000d06:	e051      	b.n	8000dac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 020e 	bic.w	r2, r2, #14
 8000d16:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0201 	bic.w	r2, r2, #1
 8000d26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <HAL_DMA_Abort_IT+0xd4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d029      	beq.n	8000d86 <HAL_DMA_Abort_IT+0xa2>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <HAL_DMA_Abort_IT+0xd8>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d022      	beq.n	8000d82 <HAL_DMA_Abort_IT+0x9e>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <HAL_DMA_Abort_IT+0xdc>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d01a      	beq.n	8000d7c <HAL_DMA_Abort_IT+0x98>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a1e      	ldr	r2, [pc, #120]	; (8000dc4 <HAL_DMA_Abort_IT+0xe0>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d012      	beq.n	8000d76 <HAL_DMA_Abort_IT+0x92>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <HAL_DMA_Abort_IT+0xe4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d00a      	beq.n	8000d70 <HAL_DMA_Abort_IT+0x8c>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <HAL_DMA_Abort_IT+0xe8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d102      	bne.n	8000d6a <HAL_DMA_Abort_IT+0x86>
 8000d64:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d68:	e00e      	b.n	8000d88 <HAL_DMA_Abort_IT+0xa4>
 8000d6a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d6e:	e00b      	b.n	8000d88 <HAL_DMA_Abort_IT+0xa4>
 8000d70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d74:	e008      	b.n	8000d88 <HAL_DMA_Abort_IT+0xa4>
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	e005      	b.n	8000d88 <HAL_DMA_Abort_IT+0xa4>
 8000d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d80:	e002      	b.n	8000d88 <HAL_DMA_Abort_IT+0xa4>
 8000d82:	2310      	movs	r3, #16
 8000d84:	e000      	b.n	8000d88 <HAL_DMA_Abort_IT+0xa4>
 8000d86:	2301      	movs	r3, #1
 8000d88:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <HAL_DMA_Abort_IT+0xec>)
 8000d8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	4798      	blx	r3
    } 
  }
  return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40020008 	.word	0x40020008
 8000dbc:	4002001c 	.word	0x4002001c
 8000dc0:	40020030 	.word	0x40020030
 8000dc4:	40020044 	.word	0x40020044
 8000dc8:	40020058 	.word	0x40020058
 8000dcc:	4002006c 	.word	0x4002006c
 8000dd0:	40020000 	.word	0x40020000

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b08b      	sub	sp, #44	; 0x2c
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dde:	2300      	movs	r3, #0
 8000de0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de6:	e161      	b.n	80010ac <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000de8:	2201      	movs	r2, #1
 8000dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	69fa      	ldr	r2, [r7, #28]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	f040 8150 	bne.w	80010a6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	4a97      	ldr	r2, [pc, #604]	; (8001068 <HAL_GPIO_Init+0x294>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d05e      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e10:	4a95      	ldr	r2, [pc, #596]	; (8001068 <HAL_GPIO_Init+0x294>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d875      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e16:	4a95      	ldr	r2, [pc, #596]	; (800106c <HAL_GPIO_Init+0x298>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d058      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e1c:	4a93      	ldr	r2, [pc, #588]	; (800106c <HAL_GPIO_Init+0x298>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d86f      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e22:	4a93      	ldr	r2, [pc, #588]	; (8001070 <HAL_GPIO_Init+0x29c>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d052      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e28:	4a91      	ldr	r2, [pc, #580]	; (8001070 <HAL_GPIO_Init+0x29c>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d869      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e2e:	4a91      	ldr	r2, [pc, #580]	; (8001074 <HAL_GPIO_Init+0x2a0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d04c      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e34:	4a8f      	ldr	r2, [pc, #572]	; (8001074 <HAL_GPIO_Init+0x2a0>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d863      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e3a:	4a8f      	ldr	r2, [pc, #572]	; (8001078 <HAL_GPIO_Init+0x2a4>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d046      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
 8000e40:	4a8d      	ldr	r2, [pc, #564]	; (8001078 <HAL_GPIO_Init+0x2a4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d85d      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e46:	2b12      	cmp	r3, #18
 8000e48:	d82a      	bhi.n	8000ea0 <HAL_GPIO_Init+0xcc>
 8000e4a:	2b12      	cmp	r3, #18
 8000e4c:	d859      	bhi.n	8000f02 <HAL_GPIO_Init+0x12e>
 8000e4e:	a201      	add	r2, pc, #4	; (adr r2, 8000e54 <HAL_GPIO_Init+0x80>)
 8000e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e54:	08000ecf 	.word	0x08000ecf
 8000e58:	08000ea9 	.word	0x08000ea9
 8000e5c:	08000ebb 	.word	0x08000ebb
 8000e60:	08000efd 	.word	0x08000efd
 8000e64:	08000f03 	.word	0x08000f03
 8000e68:	08000f03 	.word	0x08000f03
 8000e6c:	08000f03 	.word	0x08000f03
 8000e70:	08000f03 	.word	0x08000f03
 8000e74:	08000f03 	.word	0x08000f03
 8000e78:	08000f03 	.word	0x08000f03
 8000e7c:	08000f03 	.word	0x08000f03
 8000e80:	08000f03 	.word	0x08000f03
 8000e84:	08000f03 	.word	0x08000f03
 8000e88:	08000f03 	.word	0x08000f03
 8000e8c:	08000f03 	.word	0x08000f03
 8000e90:	08000f03 	.word	0x08000f03
 8000e94:	08000f03 	.word	0x08000f03
 8000e98:	08000eb1 	.word	0x08000eb1
 8000e9c:	08000ec5 	.word	0x08000ec5
 8000ea0:	4a76      	ldr	r2, [pc, #472]	; (800107c <HAL_GPIO_Init+0x2a8>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ea6:	e02c      	b.n	8000f02 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	623b      	str	r3, [r7, #32]
          break;
 8000eae:	e029      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	623b      	str	r3, [r7, #32]
          break;
 8000eb8:	e024      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	623b      	str	r3, [r7, #32]
          break;
 8000ec2:	e01f      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	330c      	adds	r3, #12
 8000eca:	623b      	str	r3, [r7, #32]
          break;
 8000ecc:	e01a      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ed6:	2304      	movs	r3, #4
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e013      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	2b01      	cmp	r3, #1
 8000ee2:	d105      	bne.n	8000ef0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	611a      	str	r2, [r3, #16]
          break;
 8000eee:	e009      	b.n	8000f04 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	615a      	str	r2, [r3, #20]
          break;
 8000efa:	e003      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000efc:	2300      	movs	r3, #0
 8000efe:	623b      	str	r3, [r7, #32]
          break;
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x130>
          break;
 8000f02:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	2bff      	cmp	r3, #255	; 0xff
 8000f08:	d801      	bhi.n	8000f0e <HAL_GPIO_Init+0x13a>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	e001      	b.n	8000f12 <HAL_GPIO_Init+0x13e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3304      	adds	r3, #4
 8000f12:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2bff      	cmp	r3, #255	; 0xff
 8000f18:	d802      	bhi.n	8000f20 <HAL_GPIO_Init+0x14c>
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	e002      	b.n	8000f26 <HAL_GPIO_Init+0x152>
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	3b08      	subs	r3, #8
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	210f      	movs	r1, #15
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	401a      	ands	r2, r3
 8000f38:	6a39      	ldr	r1, [r7, #32]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f40:	431a      	orrs	r2, r3
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 80a9 	beq.w	80010a6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f54:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <HAL_GPIO_Init+0x2ac>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a49      	ldr	r2, [pc, #292]	; (8001080 <HAL_GPIO_Init+0x2ac>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b47      	ldr	r3, [pc, #284]	; (8001080 <HAL_GPIO_Init+0x2ac>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f6c:	4a45      	ldr	r2, [pc, #276]	; (8001084 <HAL_GPIO_Init+0x2b0>)
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	3302      	adds	r3, #2
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f78:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	220f      	movs	r2, #15
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	43db      	mvns	r3, r3
 8000f8a:	68fa      	ldr	r2, [r7, #12]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a3d      	ldr	r2, [pc, #244]	; (8001088 <HAL_GPIO_Init+0x2b4>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00d      	beq.n	8000fb4 <HAL_GPIO_Init+0x1e0>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a3c      	ldr	r2, [pc, #240]	; (800108c <HAL_GPIO_Init+0x2b8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_GPIO_Init+0x1dc>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a3b      	ldr	r2, [pc, #236]	; (8001090 <HAL_GPIO_Init+0x2bc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d101      	bne.n	8000fac <HAL_GPIO_Init+0x1d8>
 8000fa8:	2302      	movs	r3, #2
 8000faa:	e004      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fac:	2303      	movs	r3, #3
 8000fae:	e002      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	e000      	b.n	8000fb6 <HAL_GPIO_Init+0x1e2>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fb8:	f002 0203 	and.w	r2, r2, #3
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	4093      	lsls	r3, r2
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000fc6:	492f      	ldr	r1, [pc, #188]	; (8001084 <HAL_GPIO_Init+0x2b0>)
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	3302      	adds	r3, #2
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d006      	beq.n	8000fee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fe0:	4b2c      	ldr	r3, [pc, #176]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	492b      	ldr	r1, [pc, #172]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	608b      	str	r3, [r1, #8]
 8000fec:	e006      	b.n	8000ffc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4927      	ldr	r1, [pc, #156]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d006      	beq.n	8001016 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 800100a:	68da      	ldr	r2, [r3, #12]
 800100c:	4921      	ldr	r1, [pc, #132]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	60cb      	str	r3, [r1, #12]
 8001014:	e006      	b.n	8001024 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001016:	4b1f      	ldr	r3, [pc, #124]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 8001018:	68da      	ldr	r2, [r3, #12]
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	43db      	mvns	r3, r3
 800101e:	491d      	ldr	r1, [pc, #116]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 8001020:	4013      	ands	r3, r2
 8001022:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001030:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	4917      	ldr	r1, [pc, #92]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	604b      	str	r3, [r1, #4]
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	43db      	mvns	r3, r3
 8001046:	4913      	ldr	r1, [pc, #76]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 8001048:	4013      	ands	r3, r2
 800104a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01f      	beq.n	8001098 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	490d      	ldr	r1, [pc, #52]	; (8001094 <HAL_GPIO_Init+0x2c0>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	600b      	str	r3, [r1, #0]
 8001064:	e01f      	b.n	80010a6 <HAL_GPIO_Init+0x2d2>
 8001066:	bf00      	nop
 8001068:	10320000 	.word	0x10320000
 800106c:	10310000 	.word	0x10310000
 8001070:	10220000 	.word	0x10220000
 8001074:	10210000 	.word	0x10210000
 8001078:	10120000 	.word	0x10120000
 800107c:	10110000 	.word	0x10110000
 8001080:	40021000 	.word	0x40021000
 8001084:	40010000 	.word	0x40010000
 8001088:	40010800 	.word	0x40010800
 800108c:	40010c00 	.word	0x40010c00
 8001090:	40011000 	.word	0x40011000
 8001094:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001098:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <HAL_GPIO_Init+0x2f4>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	43db      	mvns	r3, r3
 80010a0:	4909      	ldr	r1, [pc, #36]	; (80010c8 <HAL_GPIO_Init+0x2f4>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80010a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a8:	3301      	adds	r3, #1
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b2:	fa22 f303 	lsr.w	r3, r2, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f47f ae96 	bne.w	8000de8 <HAL_GPIO_Init+0x14>
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	372c      	adds	r7, #44	; 0x2c
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	40010400 	.word	0x40010400

080010cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
 80010d8:	4613      	mov	r3, r2
 80010da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010dc:	787b      	ldrb	r3, [r7, #1]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010e2:	887a      	ldrh	r2, [r7, #2]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80010e8:	e003      	b.n	80010f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	041a      	lsls	r2, r3, #16
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	611a      	str	r2, [r3, #16]
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e272      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8087 	beq.w	800122a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800111c:	4b92      	ldr	r3, [pc, #584]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f003 030c 	and.w	r3, r3, #12
 8001124:	2b04      	cmp	r3, #4
 8001126:	d00c      	beq.n	8001142 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001128:	4b8f      	ldr	r3, [pc, #572]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f003 030c 	and.w	r3, r3, #12
 8001130:	2b08      	cmp	r3, #8
 8001132:	d112      	bne.n	800115a <HAL_RCC_OscConfig+0x5e>
 8001134:	4b8c      	ldr	r3, [pc, #560]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001140:	d10b      	bne.n	800115a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001142:	4b89      	ldr	r3, [pc, #548]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d06c      	beq.n	8001228 <HAL_RCC_OscConfig+0x12c>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d168      	bne.n	8001228 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e24c      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001162:	d106      	bne.n	8001172 <HAL_RCC_OscConfig+0x76>
 8001164:	4b80      	ldr	r3, [pc, #512]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a7f      	ldr	r2, [pc, #508]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800116a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	e02e      	b.n	80011d0 <HAL_RCC_OscConfig+0xd4>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10c      	bne.n	8001194 <HAL_RCC_OscConfig+0x98>
 800117a:	4b7b      	ldr	r3, [pc, #492]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a7a      	ldr	r2, [pc, #488]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	4b78      	ldr	r3, [pc, #480]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a77      	ldr	r2, [pc, #476]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800118c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e01d      	b.n	80011d0 <HAL_RCC_OscConfig+0xd4>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800119c:	d10c      	bne.n	80011b8 <HAL_RCC_OscConfig+0xbc>
 800119e:	4b72      	ldr	r3, [pc, #456]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a71      	ldr	r2, [pc, #452]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4b6f      	ldr	r3, [pc, #444]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a6e      	ldr	r2, [pc, #440]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e00b      	b.n	80011d0 <HAL_RCC_OscConfig+0xd4>
 80011b8:	4b6b      	ldr	r3, [pc, #428]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a6a      	ldr	r2, [pc, #424]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b68      	ldr	r3, [pc, #416]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a67      	ldr	r2, [pc, #412]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d013      	beq.n	8001200 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fc0e 	bl	80009f8 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fc0a 	bl	80009f8 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e200      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b5d      	ldr	r3, [pc, #372]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0xe4>
 80011fe:	e014      	b.n	800122a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fbfa 	bl	80009f8 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001208:	f7ff fbf6 	bl	80009f8 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	; 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e1ec      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	4b53      	ldr	r3, [pc, #332]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f0      	bne.n	8001208 <HAL_RCC_OscConfig+0x10c>
 8001226:	e000      	b.n	800122a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001228:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d063      	beq.n	80012fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001236:	4b4c      	ldr	r3, [pc, #304]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00b      	beq.n	800125a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001242:	4b49      	ldr	r3, [pc, #292]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 030c 	and.w	r3, r3, #12
 800124a:	2b08      	cmp	r3, #8
 800124c:	d11c      	bne.n	8001288 <HAL_RCC_OscConfig+0x18c>
 800124e:	4b46      	ldr	r3, [pc, #280]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d116      	bne.n	8001288 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	4b43      	ldr	r3, [pc, #268]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d005      	beq.n	8001272 <HAL_RCC_OscConfig+0x176>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d001      	beq.n	8001272 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e1c0      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001272:	4b3d      	ldr	r3, [pc, #244]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4939      	ldr	r1, [pc, #228]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001286:	e03a      	b.n	80012fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d020      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001290:	4b36      	ldr	r3, [pc, #216]	; (800136c <HAL_RCC_OscConfig+0x270>)
 8001292:	2201      	movs	r2, #1
 8001294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001296:	f7ff fbaf 	bl	80009f8 <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800129e:	f7ff fbab 	bl	80009f8 <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e1a1      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d0f0      	beq.n	800129e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012bc:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4927      	ldr	r1, [pc, #156]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	600b      	str	r3, [r1, #0]
 80012d0:	e015      	b.n	80012fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <HAL_RCC_OscConfig+0x270>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d8:	f7ff fb8e 	bl	80009f8 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e0:	f7ff fb8a 	bl	80009f8 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e180      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	2b00      	cmp	r3, #0
 8001308:	d03a      	beq.n	8001380 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d019      	beq.n	8001346 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <HAL_RCC_OscConfig+0x274>)
 8001314:	2201      	movs	r2, #1
 8001316:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001318:	f7ff fb6e 	bl	80009f8 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fb6a 	bl	80009f8 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e160      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <HAL_RCC_OscConfig+0x26c>)
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800133e:	2001      	movs	r0, #1
 8001340:	f000 face 	bl	80018e0 <RCC_Delay>
 8001344:	e01c      	b.n	8001380 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_RCC_OscConfig+0x274>)
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134c:	f7ff fb54 	bl	80009f8 <HAL_GetTick>
 8001350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001352:	e00f      	b.n	8001374 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001354:	f7ff fb50 	bl	80009f8 <HAL_GetTick>
 8001358:	4602      	mov	r2, r0
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d908      	bls.n	8001374 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e146      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000
 800136c:	42420000 	.word	0x42420000
 8001370:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001374:	4b92      	ldr	r3, [pc, #584]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1e9      	bne.n	8001354 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80a6 	beq.w	80014da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001392:	4b8b      	ldr	r3, [pc, #556]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10d      	bne.n	80013ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a87      	ldr	r2, [pc, #540]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b85      	ldr	r3, [pc, #532]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013b6:	2301      	movs	r3, #1
 80013b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ba:	4b82      	ldr	r3, [pc, #520]	; (80015c4 <HAL_RCC_OscConfig+0x4c8>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d118      	bne.n	80013f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c6:	4b7f      	ldr	r3, [pc, #508]	; (80015c4 <HAL_RCC_OscConfig+0x4c8>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a7e      	ldr	r2, [pc, #504]	; (80015c4 <HAL_RCC_OscConfig+0x4c8>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d2:	f7ff fb11 	bl	80009f8 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013da:	f7ff fb0d 	bl	80009f8 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b64      	cmp	r3, #100	; 0x64
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e103      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ec:	4b75      	ldr	r3, [pc, #468]	; (80015c4 <HAL_RCC_OscConfig+0x4c8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d0f0      	beq.n	80013da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d106      	bne.n	800140e <HAL_RCC_OscConfig+0x312>
 8001400:	4b6f      	ldr	r3, [pc, #444]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	4a6e      	ldr	r2, [pc, #440]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6213      	str	r3, [r2, #32]
 800140c:	e02d      	b.n	800146a <HAL_RCC_OscConfig+0x36e>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <HAL_RCC_OscConfig+0x334>
 8001416:	4b6a      	ldr	r3, [pc, #424]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001418:	6a1b      	ldr	r3, [r3, #32]
 800141a:	4a69      	ldr	r2, [pc, #420]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 800141c:	f023 0301 	bic.w	r3, r3, #1
 8001420:	6213      	str	r3, [r2, #32]
 8001422:	4b67      	ldr	r3, [pc, #412]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4a66      	ldr	r2, [pc, #408]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	f023 0304 	bic.w	r3, r3, #4
 800142c:	6213      	str	r3, [r2, #32]
 800142e:	e01c      	b.n	800146a <HAL_RCC_OscConfig+0x36e>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	2b05      	cmp	r3, #5
 8001436:	d10c      	bne.n	8001452 <HAL_RCC_OscConfig+0x356>
 8001438:	4b61      	ldr	r3, [pc, #388]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 800143a:	6a1b      	ldr	r3, [r3, #32]
 800143c:	4a60      	ldr	r2, [pc, #384]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6213      	str	r3, [r2, #32]
 8001444:	4b5e      	ldr	r3, [pc, #376]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4a5d      	ldr	r2, [pc, #372]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 800144a:	f043 0301 	orr.w	r3, r3, #1
 800144e:	6213      	str	r3, [r2, #32]
 8001450:	e00b      	b.n	800146a <HAL_RCC_OscConfig+0x36e>
 8001452:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4a5a      	ldr	r2, [pc, #360]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	6213      	str	r3, [r2, #32]
 800145e:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4a57      	ldr	r2, [pc, #348]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001464:	f023 0304 	bic.w	r3, r3, #4
 8001468:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d015      	beq.n	800149e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fac1 	bl	80009f8 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001478:	e00a      	b.n	8001490 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800147a:	f7ff fabd 	bl	80009f8 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f241 3288 	movw	r2, #5000	; 0x1388
 8001488:	4293      	cmp	r3, r2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e0b1      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	4b4b      	ldr	r3, [pc, #300]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0ee      	beq.n	800147a <HAL_RCC_OscConfig+0x37e>
 800149c:	e014      	b.n	80014c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149e:	f7ff faab 	bl	80009f8 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014a6:	f7ff faa7 	bl	80009f8 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e09b      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014bc:	4b40      	ldr	r3, [pc, #256]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1ee      	bne.n	80014a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d105      	bne.n	80014da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014ce:	4b3c      	ldr	r3, [pc, #240]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	4a3b      	ldr	r2, [pc, #236]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 80014d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	69db      	ldr	r3, [r3, #28]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 8087 	beq.w	80015f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e4:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 030c 	and.w	r3, r3, #12
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d061      	beq.n	80015b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d146      	bne.n	8001586 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f8:	4b33      	ldr	r3, [pc, #204]	; (80015c8 <HAL_RCC_OscConfig+0x4cc>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fa7b 	bl	80009f8 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fa77 	bl	80009f8 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e06d      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001518:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d108      	bne.n	8001540 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800152e:	4b24      	ldr	r3, [pc, #144]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	4921      	ldr	r1, [pc, #132]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 800153c:	4313      	orrs	r3, r2
 800153e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001540:	4b1f      	ldr	r3, [pc, #124]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a19      	ldr	r1, [r3, #32]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	430b      	orrs	r3, r1
 8001552:	491b      	ldr	r1, [pc, #108]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_RCC_OscConfig+0x4cc>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fa4b 	bl	80009f8 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fa47 	bl	80009f8 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e03d      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x46a>
 8001584:	e035      	b.n	80015f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_RCC_OscConfig+0x4cc>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fa34 	bl	80009f8 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fa30 	bl	80009f8 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e026      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x498>
 80015b2:	e01e      	b.n	80015f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e019      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40007000 	.word	0x40007000
 80015c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_RCC_OscConfig+0x500>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d001      	beq.n	80015f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40021000 	.word	0x40021000

08001600 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d101      	bne.n	8001614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e0d0      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001614:	4b6a      	ldr	r3, [pc, #424]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0307 	and.w	r3, r3, #7
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	429a      	cmp	r2, r3
 8001620:	d910      	bls.n	8001644 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001622:	4b67      	ldr	r3, [pc, #412]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f023 0207 	bic.w	r2, r3, #7
 800162a:	4965      	ldr	r1, [pc, #404]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001632:	4b63      	ldr	r3, [pc, #396]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	429a      	cmp	r2, r3
 800163e:	d001      	beq.n	8001644 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0b8      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d020      	beq.n	8001692 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800165c:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001666:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d005      	beq.n	8001680 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001674:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	4a52      	ldr	r2, [pc, #328]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800167a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800167e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	494d      	ldr	r1, [pc, #308]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d040      	beq.n	8001720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d115      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e07f      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016be:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d109      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e073      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ce:	4b3d      	ldr	r3, [pc, #244]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e06b      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016de:	4b39      	ldr	r3, [pc, #228]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f023 0203 	bic.w	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4936      	ldr	r1, [pc, #216]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f0:	f7ff f982 	bl	80009f8 <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f6:	e00a      	b.n	800170e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016f8:	f7ff f97e 	bl	80009f8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	f241 3288 	movw	r2, #5000	; 0x1388
 8001706:	4293      	cmp	r3, r2
 8001708:	d901      	bls.n	800170e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e053      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	4b2d      	ldr	r3, [pc, #180]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 020c 	and.w	r2, r3, #12
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	429a      	cmp	r2, r3
 800171e:	d1eb      	bne.n	80016f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001720:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d210      	bcs.n	8001750 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 0207 	bic.w	r2, r3, #7
 8001736:	4922      	ldr	r1, [pc, #136]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e032      	b.n	80017b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800175c:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4916      	ldr	r1, [pc, #88]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0308 	and.w	r3, r3, #8
 8001776:	2b00      	cmp	r3, #0
 8001778:	d009      	beq.n	800178e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	490e      	ldr	r1, [pc, #56]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800178e:	f000 f821 	bl	80017d4 <HAL_RCC_GetSysClockFreq>
 8001792:	4602      	mov	r2, r0
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	490a      	ldr	r1, [pc, #40]	; (80017c8 <HAL_RCC_ClockConfig+0x1c8>)
 80017a0:	5ccb      	ldrb	r3, [r1, r3]
 80017a2:	fa22 f303 	lsr.w	r3, r2, r3
 80017a6:	4a09      	ldr	r2, [pc, #36]	; (80017cc <HAL_RCC_ClockConfig+0x1cc>)
 80017a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_RCC_ClockConfig+0x1d0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff f8e0 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000
 80017c4:	40021000 	.word	0x40021000
 80017c8:	08003abc 	.word	0x08003abc
 80017cc:	20000000 	.word	0x20000000
 80017d0:	20000004 	.word	0x20000004

080017d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b087      	sub	sp, #28
 80017d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ee:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <HAL_RCC_GetSysClockFreq+0x94>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d002      	beq.n	8001804 <HAL_RCC_GetSysClockFreq+0x30>
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d003      	beq.n	800180a <HAL_RCC_GetSysClockFreq+0x36>
 8001802:	e027      	b.n	8001854 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001804:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_RCC_GetSysClockFreq+0x98>)
 8001806:	613b      	str	r3, [r7, #16]
      break;
 8001808:	e027      	b.n	800185a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	0c9b      	lsrs	r3, r3, #18
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	4a17      	ldr	r2, [pc, #92]	; (8001870 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d010      	beq.n	8001844 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <HAL_RCC_GetSysClockFreq+0x94>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	0c5b      	lsrs	r3, r3, #17
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	4a11      	ldr	r2, [pc, #68]	; (8001874 <HAL_RCC_GetSysClockFreq+0xa0>)
 800182e:	5cd3      	ldrb	r3, [r2, r3]
 8001830:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <HAL_RCC_GetSysClockFreq+0x98>)
 8001836:	fb03 f202 	mul.w	r2, r3, r2
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	e004      	b.n	800184e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a0c      	ldr	r2, [pc, #48]	; (8001878 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	613b      	str	r3, [r7, #16]
      break;
 8001852:	e002      	b.n	800185a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001854:	4b05      	ldr	r3, [pc, #20]	; (800186c <HAL_RCC_GetSysClockFreq+0x98>)
 8001856:	613b      	str	r3, [r7, #16]
      break;
 8001858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800185a:	693b      	ldr	r3, [r7, #16]
}
 800185c:	4618      	mov	r0, r3
 800185e:	371c      	adds	r7, #28
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40021000 	.word	0x40021000
 800186c:	007a1200 	.word	0x007a1200
 8001870:	08003ad4 	.word	0x08003ad4
 8001874:	08003ae4 	.word	0x08003ae4
 8001878:	003d0900 	.word	0x003d0900

0800187c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001880:	4b02      	ldr	r3, [pc, #8]	; (800188c <HAL_RCC_GetHCLKFreq+0x10>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	20000000 	.word	0x20000000

08001890 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001894:	f7ff fff2 	bl	800187c <HAL_RCC_GetHCLKFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	4903      	ldr	r1, [pc, #12]	; (80018b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	08003acc 	.word	0x08003acc

080018b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018bc:	f7ff ffde 	bl	800187c <HAL_RCC_GetHCLKFreq>
 80018c0:	4602      	mov	r2, r0
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	0adb      	lsrs	r3, r3, #11
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	4903      	ldr	r1, [pc, #12]	; (80018dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ce:	5ccb      	ldrb	r3, [r1, r3]
 80018d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	08003acc 	.word	0x08003acc

080018e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <RCC_Delay+0x34>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <RCC_Delay+0x38>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018fc:	bf00      	nop
  }
  while (Delay --);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	60fa      	str	r2, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f9      	bne.n	80018fc <RCC_Delay+0x1c>
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	20000000 	.word	0x20000000
 8001918:	10624dd3 	.word	0x10624dd3

0800191c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e041      	b.n	80019b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7fe fe56 	bl	80005f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3304      	adds	r3, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4610      	mov	r0, r2
 800195c:	f000 fda6 	bl	80024ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d001      	beq.n	80019d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e02d      	b.n	8001a30 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2202      	movs	r2, #2
 80019d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a16      	ldr	r2, [pc, #88]	; (8001a3c <HAL_TIM_Base_Start+0x80>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d009      	beq.n	80019fa <HAL_TIM_Base_Start+0x3e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ee:	d004      	beq.n	80019fa <HAL_TIM_Base_Start+0x3e>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <HAL_TIM_Base_Start+0x84>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d111      	bne.n	8001a1e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2b06      	cmp	r3, #6
 8001a0a:	d010      	beq.n	8001a2e <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0201 	orr.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a1c:	e007      	b.n	8001a2e <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40012c00 	.word	0x40012c00
 8001a40:	40000400 	.word	0x40000400

08001a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d001      	beq.n	8001a5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e035      	b.n	8001ac8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a16      	ldr	r2, [pc, #88]	; (8001ad4 <HAL_TIM_Base_Start_IT+0x90>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d009      	beq.n	8001a92 <HAL_TIM_Base_Start_IT+0x4e>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a86:	d004      	beq.n	8001a92 <HAL_TIM_Base_Start_IT+0x4e>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <HAL_TIM_Base_Start_IT+0x94>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d111      	bne.n	8001ab6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2b06      	cmp	r3, #6
 8001aa2:	d010      	beq.n	8001ac6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0201 	orr.w	r2, r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ab4:	e007      	b.n	8001ac6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	40012c00 	.word	0x40012c00
 8001ad8:	40000400 	.word	0x40000400

08001adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e041      	b.n	8001b72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d106      	bne.n	8001b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f839 	bl	8001b7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3304      	adds	r3, #4
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f000 fcc6 	bl	80024ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d109      	bne.n	8001bb0 <HAL_TIM_PWM_Start+0x24>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	bf14      	ite	ne
 8001ba8:	2301      	movne	r3, #1
 8001baa:	2300      	moveq	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	e022      	b.n	8001bf6 <HAL_TIM_PWM_Start+0x6a>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d109      	bne.n	8001bca <HAL_TIM_PWM_Start+0x3e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	bf14      	ite	ne
 8001bc2:	2301      	movne	r3, #1
 8001bc4:	2300      	moveq	r3, #0
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	e015      	b.n	8001bf6 <HAL_TIM_PWM_Start+0x6a>
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d109      	bne.n	8001be4 <HAL_TIM_PWM_Start+0x58>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	bf14      	ite	ne
 8001bdc:	2301      	movne	r3, #1
 8001bde:	2300      	moveq	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	e008      	b.n	8001bf6 <HAL_TIM_PWM_Start+0x6a>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	bf14      	ite	ne
 8001bf0:	2301      	movne	r3, #1
 8001bf2:	2300      	moveq	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e059      	b.n	8001cb2 <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d104      	bne.n	8001c0e <HAL_TIM_PWM_Start+0x82>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c0c:	e013      	b.n	8001c36 <HAL_TIM_PWM_Start+0xaa>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d104      	bne.n	8001c1e <HAL_TIM_PWM_Start+0x92>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c1c:	e00b      	b.n	8001c36 <HAL_TIM_PWM_Start+0xaa>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b08      	cmp	r3, #8
 8001c22:	d104      	bne.n	8001c2e <HAL_TIM_PWM_Start+0xa2>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c2c:	e003      	b.n	8001c36 <HAL_TIM_PWM_Start+0xaa>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	6839      	ldr	r1, [r7, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f001 f843 	bl	8002cca <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <HAL_TIM_PWM_Start+0x130>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d107      	bne.n	8001c5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a16      	ldr	r2, [pc, #88]	; (8001cbc <HAL_TIM_PWM_Start+0x130>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_TIM_PWM_Start+0xf0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d004      	beq.n	8001c7c <HAL_TIM_PWM_Start+0xf0>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a12      	ldr	r2, [pc, #72]	; (8001cc0 <HAL_TIM_PWM_Start+0x134>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d111      	bne.n	8001ca0 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d010      	beq.n	8001cb0 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9e:	e007      	b.n	8001cb0 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40012c00 	.word	0x40012c00
 8001cc0:	40000400 	.word	0x40000400

08001cc4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e041      	b.n	8001d5a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f839 	bl	8001d62 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f000 fbd2 	bl	80024ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d122      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d11b      	bne.n	8001dd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0202 	mvn.w	r2, #2
 8001da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fb5d 	bl	8002476 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fb50 	bl	8002464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fb5f 	bl	8002488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d122      	bne.n	8001e24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d11b      	bne.n	8001e24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f06f 0204 	mvn.w	r2, #4
 8001df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 fb33 	bl	8002476 <HAL_TIM_IC_CaptureCallback>
 8001e10:	e005      	b.n	8001e1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fb26 	bl	8002464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 fb35 	bl	8002488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b08      	cmp	r3, #8
 8001e30:	d122      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d11b      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0208 	mvn.w	r2, #8
 8001e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 fb09 	bl	8002476 <HAL_TIM_IC_CaptureCallback>
 8001e64:	e005      	b.n	8001e72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fafc 	bl	8002464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fb0b 	bl	8002488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b10      	cmp	r3, #16
 8001e84:	d122      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b10      	cmp	r3, #16
 8001e92:	d11b      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0210 	mvn.w	r2, #16
 8001e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2208      	movs	r2, #8
 8001ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 fadf 	bl	8002476 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fad2 	bl	8002464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fae1 	bl	8002488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d107      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0201 	mvn.w	r2, #1
 8001ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 faad 	bl	8002452 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	2b80      	cmp	r3, #128	; 0x80
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f10:	2b80      	cmp	r3, #128	; 0x80
 8001f12:	d107      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 ff59 	bl	8002dd6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2e:	2b40      	cmp	r3, #64	; 0x40
 8001f30:	d10e      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3c:	2b40      	cmp	r3, #64	; 0x40
 8001f3e:	d107      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 faa5 	bl	800249a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0320 	and.w	r3, r3, #32
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d10e      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b20      	cmp	r3, #32
 8001f6a:	d107      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0220 	mvn.w	r2, #32
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 ff24 	bl	8002dc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e088      	b.n	80020b4 <HAL_TIM_IC_ConfigChannel+0x130>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d11b      	bne.n	8001fe8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6818      	ldr	r0, [r3, #0]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	6819      	ldr	r1, [r3, #0]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f000 fce6 	bl	8002990 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 020c 	bic.w	r2, r2, #12
 8001fd2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6999      	ldr	r1, [r3, #24]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	689a      	ldr	r2, [r3, #8]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	619a      	str	r2, [r3, #24]
 8001fe6:	e060      	b.n	80020aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d11c      	bne.n	8002028 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6818      	ldr	r0, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	6819      	ldr	r1, [r3, #0]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f000 fd49 	bl	8002a94 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002010:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6999      	ldr	r1, [r3, #24]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	021a      	lsls	r2, r3, #8
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	619a      	str	r2, [r3, #24]
 8002026:	e040      	b.n	80020aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11b      	bne.n	8002066 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	6819      	ldr	r1, [r3, #0]
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f000 fd94 	bl	8002b6a <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	69da      	ldr	r2, [r3, #28]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 020c 	bic.w	r2, r2, #12
 8002050:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	69d9      	ldr	r1, [r3, #28]
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	61da      	str	r2, [r3, #28]
 8002064:	e021      	b.n	80020aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b0c      	cmp	r3, #12
 800206a:	d11c      	bne.n	80020a6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	6819      	ldr	r1, [r3, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	685a      	ldr	r2, [r3, #4]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f000 fdb0 	bl	8002be0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800208e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	69d9      	ldr	r1, [r3, #28]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	021a      	lsls	r2, r3, #8
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	61da      	str	r2, [r3, #28]
 80020a4:	e001      	b.n	80020aa <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e0ae      	b.n	8002238 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b0c      	cmp	r3, #12
 80020e6:	f200 809f 	bhi.w	8002228 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020ea:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	08002125 	.word	0x08002125
 80020f4:	08002229 	.word	0x08002229
 80020f8:	08002229 	.word	0x08002229
 80020fc:	08002229 	.word	0x08002229
 8002100:	08002165 	.word	0x08002165
 8002104:	08002229 	.word	0x08002229
 8002108:	08002229 	.word	0x08002229
 800210c:	08002229 	.word	0x08002229
 8002110:	080021a7 	.word	0x080021a7
 8002114:	08002229 	.word	0x08002229
 8002118:	08002229 	.word	0x08002229
 800211c:	08002229 	.word	0x08002229
 8002120:	080021e7 	.word	0x080021e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68b9      	ldr	r1, [r7, #8]
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fa16 	bl	800255c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699a      	ldr	r2, [r3, #24]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0208 	orr.w	r2, r2, #8
 800213e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	699a      	ldr	r2, [r3, #24]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 0204 	bic.w	r2, r2, #4
 800214e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6999      	ldr	r1, [r3, #24]
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	691a      	ldr	r2, [r3, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	619a      	str	r2, [r3, #24]
      break;
 8002162:	e064      	b.n	800222e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68b9      	ldr	r1, [r7, #8]
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fa5c 	bl	8002628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	699a      	ldr	r2, [r3, #24]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800217e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699a      	ldr	r2, [r3, #24]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800218e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6999      	ldr	r1, [r3, #24]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	691b      	ldr	r3, [r3, #16]
 800219a:	021a      	lsls	r2, r3, #8
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	619a      	str	r2, [r3, #24]
      break;
 80021a4:	e043      	b.n	800222e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 faa5 	bl	80026fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	69da      	ldr	r2, [r3, #28]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0208 	orr.w	r2, r2, #8
 80021c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f022 0204 	bic.w	r2, r2, #4
 80021d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	69d9      	ldr	r1, [r3, #28]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	61da      	str	r2, [r3, #28]
      break;
 80021e4:	e023      	b.n	800222e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68b9      	ldr	r1, [r7, #8]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f000 faef 	bl	80027d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69da      	ldr	r2, [r3, #28]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	69da      	ldr	r2, [r3, #28]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69d9      	ldr	r1, [r3, #28]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	021a      	lsls	r2, r3, #8
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	430a      	orrs	r2, r1
 8002224:	61da      	str	r2, [r3, #28]
      break;
 8002226:	e002      	b.n	800222e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	75fb      	strb	r3, [r7, #23]
      break;
 800222c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002236:	7dfb      	ldrb	r3, [r7, #23]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800224a:	2300      	movs	r3, #0
 800224c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <HAL_TIM_ConfigClockSource+0x1c>
 8002258:	2302      	movs	r3, #2
 800225a:	e0b4      	b.n	80023c6 <HAL_TIM_ConfigClockSource+0x186>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800227a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002294:	d03e      	beq.n	8002314 <HAL_TIM_ConfigClockSource+0xd4>
 8002296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229a:	f200 8087 	bhi.w	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 800229e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022a2:	f000 8086 	beq.w	80023b2 <HAL_TIM_ConfigClockSource+0x172>
 80022a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022aa:	d87f      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022ac:	2b70      	cmp	r3, #112	; 0x70
 80022ae:	d01a      	beq.n	80022e6 <HAL_TIM_ConfigClockSource+0xa6>
 80022b0:	2b70      	cmp	r3, #112	; 0x70
 80022b2:	d87b      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022b4:	2b60      	cmp	r3, #96	; 0x60
 80022b6:	d050      	beq.n	800235a <HAL_TIM_ConfigClockSource+0x11a>
 80022b8:	2b60      	cmp	r3, #96	; 0x60
 80022ba:	d877      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022bc:	2b50      	cmp	r3, #80	; 0x50
 80022be:	d03c      	beq.n	800233a <HAL_TIM_ConfigClockSource+0xfa>
 80022c0:	2b50      	cmp	r3, #80	; 0x50
 80022c2:	d873      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	d058      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x13a>
 80022c8:	2b40      	cmp	r3, #64	; 0x40
 80022ca:	d86f      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022cc:	2b30      	cmp	r3, #48	; 0x30
 80022ce:	d064      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x15a>
 80022d0:	2b30      	cmp	r3, #48	; 0x30
 80022d2:	d86b      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d060      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x15a>
 80022d8:	2b20      	cmp	r3, #32
 80022da:	d867      	bhi.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d05c      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x15a>
 80022e0:	2b10      	cmp	r3, #16
 80022e2:	d05a      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x15a>
 80022e4:	e062      	b.n	80023ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6899      	ldr	r1, [r3, #8]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f000 fcc9 	bl	8002c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	609a      	str	r2, [r3, #8]
      break;
 8002312:	e04f      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6899      	ldr	r1, [r3, #8]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f000 fcb2 	bl	8002c8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002336:	609a      	str	r2, [r3, #8]
      break;
 8002338:	e03c      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6859      	ldr	r1, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	461a      	mov	r2, r3
 8002348:	f000 fb76 	bl	8002a38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2150      	movs	r1, #80	; 0x50
 8002352:	4618      	mov	r0, r3
 8002354:	f000 fc80 	bl	8002c58 <TIM_ITRx_SetConfig>
      break;
 8002358:	e02c      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	461a      	mov	r2, r3
 8002368:	f000 fbd0 	bl	8002b0c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2160      	movs	r1, #96	; 0x60
 8002372:	4618      	mov	r0, r3
 8002374:	f000 fc70 	bl	8002c58 <TIM_ITRx_SetConfig>
      break;
 8002378:	e01c      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	461a      	mov	r2, r3
 8002388:	f000 fb56 	bl	8002a38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2140      	movs	r1, #64	; 0x40
 8002392:	4618      	mov	r0, r3
 8002394:	f000 fc60 	bl	8002c58 <TIM_ITRx_SetConfig>
      break;
 8002398:	e00c      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4619      	mov	r1, r3
 80023a4:	4610      	mov	r0, r2
 80023a6:	f000 fc57 	bl	8002c58 <TIM_ITRx_SetConfig>
      break;
 80023aa:	e003      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
      break;
 80023b0:	e000      	b.n	80023b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e031      	b.n	800244a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2202      	movs	r2, #2
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80023f6:	6839      	ldr	r1, [r7, #0]
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fa37 	bl	800286c <TIM_SlaveTimer_SetConfig>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e018      	b.n	800244a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002426:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002436:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr

08002488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800249a:	b480      	push	{r7}
 800249c:	b083      	sub	sp, #12
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024a2:	bf00      	nop
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a25      	ldr	r2, [pc, #148]	; (8002554 <TIM_Base_SetConfig+0xa8>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d007      	beq.n	80024d4 <TIM_Base_SetConfig+0x28>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ca:	d003      	beq.n	80024d4 <TIM_Base_SetConfig+0x28>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a22      	ldr	r2, [pc, #136]	; (8002558 <TIM_Base_SetConfig+0xac>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d108      	bne.n	80024e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a1a      	ldr	r2, [pc, #104]	; (8002554 <TIM_Base_SetConfig+0xa8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d007      	beq.n	80024fe <TIM_Base_SetConfig+0x52>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f4:	d003      	beq.n	80024fe <TIM_Base_SetConfig+0x52>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a17      	ldr	r2, [pc, #92]	; (8002558 <TIM_Base_SetConfig+0xac>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d108      	bne.n	8002510 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4313      	orrs	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4313      	orrs	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a07      	ldr	r2, [pc, #28]	; (8002554 <TIM_Base_SetConfig+0xa8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d103      	bne.n	8002544 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	615a      	str	r2, [r3, #20]
}
 800254a:	bf00      	nop
 800254c:	3714      	adds	r7, #20
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	40012c00 	.word	0x40012c00
 8002558:	40000400 	.word	0x40000400

0800255c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f023 0201 	bic.w	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4313      	orrs	r3, r2
 800259c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f023 0302 	bic.w	r3, r3, #2
 80025a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	697a      	ldr	r2, [r7, #20]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a1c      	ldr	r2, [pc, #112]	; (8002624 <TIM_OC1_SetConfig+0xc8>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d10c      	bne.n	80025d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f023 0308 	bic.w	r3, r3, #8
 80025be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a13      	ldr	r2, [pc, #76]	; (8002624 <TIM_OC1_SetConfig+0xc8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d111      	bne.n	80025fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	621a      	str	r2, [r3, #32]
}
 8002618:	bf00      	nop
 800261a:	371c      	adds	r7, #28
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr
 8002622:	bf00      	nop
 8002624:	40012c00 	.word	0x40012c00

08002628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002628:	b480      	push	{r7}
 800262a:	b087      	sub	sp, #28
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	f023 0210 	bic.w	r2, r3, #16
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800265e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f023 0320 	bic.w	r3, r3, #32
 8002672:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	011b      	lsls	r3, r3, #4
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <TIM_OC2_SetConfig+0xd0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d10d      	bne.n	80026a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800268e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	4313      	orrs	r3, r2
 800269a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <TIM_OC2_SetConfig+0xd0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d113      	bne.n	80026d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	621a      	str	r2, [r3, #32]
}
 80026ee:	bf00      	nop
 80026f0:	371c      	adds	r7, #28
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	40012c00 	.word	0x40012c00

080026fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0303 	bic.w	r3, r3, #3
 8002732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	697a      	ldr	r2, [r7, #20]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <TIM_OC3_SetConfig+0xd0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d10d      	bne.n	8002776 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002760:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002774:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a14      	ldr	r2, [pc, #80]	; (80027cc <TIM_OC3_SetConfig+0xd0>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d113      	bne.n	80027a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002784:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800278c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	693a      	ldr	r2, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	693a      	ldr	r2, [r7, #16]
 80027aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	621a      	str	r2, [r3, #32]
}
 80027c0:	bf00      	nop
 80027c2:	371c      	adds	r7, #28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40012c00 	.word	0x40012c00

080027d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002806:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	4313      	orrs	r3, r2
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800281a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	031b      	lsls	r3, r3, #12
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	4313      	orrs	r3, r2
 8002826:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a0f      	ldr	r2, [pc, #60]	; (8002868 <TIM_OC4_SetConfig+0x98>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d109      	bne.n	8002844 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002836:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	019b      	lsls	r3, r3, #6
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	621a      	str	r2, [r3, #32]
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	40012c00 	.word	0x40012c00

0800286c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002888:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f023 0307 	bic.w	r3, r3, #7
 800289a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b70      	cmp	r3, #112	; 0x70
 80028b4:	d01a      	beq.n	80028ec <TIM_SlaveTimer_SetConfig+0x80>
 80028b6:	2b70      	cmp	r3, #112	; 0x70
 80028b8:	d860      	bhi.n	800297c <TIM_SlaveTimer_SetConfig+0x110>
 80028ba:	2b60      	cmp	r3, #96	; 0x60
 80028bc:	d054      	beq.n	8002968 <TIM_SlaveTimer_SetConfig+0xfc>
 80028be:	2b60      	cmp	r3, #96	; 0x60
 80028c0:	d85c      	bhi.n	800297c <TIM_SlaveTimer_SetConfig+0x110>
 80028c2:	2b50      	cmp	r3, #80	; 0x50
 80028c4:	d046      	beq.n	8002954 <TIM_SlaveTimer_SetConfig+0xe8>
 80028c6:	2b50      	cmp	r3, #80	; 0x50
 80028c8:	d858      	bhi.n	800297c <TIM_SlaveTimer_SetConfig+0x110>
 80028ca:	2b40      	cmp	r3, #64	; 0x40
 80028cc:	d019      	beq.n	8002902 <TIM_SlaveTimer_SetConfig+0x96>
 80028ce:	2b40      	cmp	r3, #64	; 0x40
 80028d0:	d854      	bhi.n	800297c <TIM_SlaveTimer_SetConfig+0x110>
 80028d2:	2b30      	cmp	r3, #48	; 0x30
 80028d4:	d055      	beq.n	8002982 <TIM_SlaveTimer_SetConfig+0x116>
 80028d6:	2b30      	cmp	r3, #48	; 0x30
 80028d8:	d850      	bhi.n	800297c <TIM_SlaveTimer_SetConfig+0x110>
 80028da:	2b20      	cmp	r3, #32
 80028dc:	d051      	beq.n	8002982 <TIM_SlaveTimer_SetConfig+0x116>
 80028de:	2b20      	cmp	r3, #32
 80028e0:	d84c      	bhi.n	800297c <TIM_SlaveTimer_SetConfig+0x110>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d04d      	beq.n	8002982 <TIM_SlaveTimer_SetConfig+0x116>
 80028e6:	2b10      	cmp	r3, #16
 80028e8:	d04b      	beq.n	8002982 <TIM_SlaveTimer_SetConfig+0x116>
 80028ea:	e047      	b.n	800297c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68d9      	ldr	r1, [r3, #12]
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	f000 f9c6 	bl	8002c8c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8002900:	e040      	b.n	8002984 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b05      	cmp	r3, #5
 8002908:	d101      	bne.n	800290e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e03b      	b.n	8002986 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6a1a      	ldr	r2, [r3, #32]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002934:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	4313      	orrs	r3, r2
 8002940:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	621a      	str	r2, [r3, #32]
      break;
 8002952:	e017      	b.n	8002984 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	6899      	ldr	r1, [r3, #8]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	461a      	mov	r2, r3
 8002962:	f000 f869 	bl	8002a38 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8002966:	e00d      	b.n	8002984 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6818      	ldr	r0, [r3, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	6899      	ldr	r1, [r3, #8]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	461a      	mov	r2, r3
 8002976:	f000 f8c9 	bl	8002b0c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800297a:	e003      	b.n	8002984 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	75fb      	strb	r3, [r7, #23]
      break;
 8002980:	e000      	b.n	8002984 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002982:	bf00      	nop
  }

  return status;
 8002984:	7dfb      	ldrb	r3, [r7, #23]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f023 0201 	bic.w	r2, r3, #1
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <TIM_TI1_SetConfig+0xa0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d007      	beq.n	80029ce <TIM_TI1_SetConfig+0x3e>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c4:	d003      	beq.n	80029ce <TIM_TI1_SetConfig+0x3e>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <TIM_TI1_SetConfig+0xa4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <TIM_TI1_SetConfig+0x42>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <TIM_TI1_SetConfig+0x44>
 80029d2:	2300      	movs	r3, #0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0303 	bic.w	r3, r3, #3
 80029de:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e003      	b.n	80029f2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f023 030a 	bic.w	r3, r3, #10
 8002a0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f003 030a 	and.w	r3, r3, #10
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	621a      	str	r2, [r3, #32]
}
 8002a26:	bf00      	nop
 8002a28:	371c      	adds	r7, #28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40000400 	.word	0x40000400

08002a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f023 0201 	bic.w	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f023 030a 	bic.w	r3, r3, #10
 8002a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	621a      	str	r2, [r3, #32]
}
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
 8002aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f023 0210 	bic.w	r2, r3, #16
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ad2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	031b      	lsls	r3, r3, #12
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ae6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	621a      	str	r2, [r3, #32]
}
 8002b02:	bf00      	nop
 8002b04:	371c      	adds	r7, #28
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	f023 0210 	bic.w	r2, r3, #16
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	031b      	lsls	r3, r3, #12
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	621a      	str	r2, [r3, #32]
}
 8002b60:	bf00      	nop
 8002b62:	371c      	adds	r7, #28
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bc80      	pop	{r7}
 8002b68:	4770      	bx	lr

08002b6a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b087      	sub	sp, #28
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f023 0303 	bic.w	r3, r3, #3
 8002b96:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ba6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	621a      	str	r2, [r3, #32]
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c1e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	031b      	lsls	r3, r3, #12
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c32:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	031b      	lsls	r3, r3, #12
 8002c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	621a      	str	r2, [r3, #32]
}
 8002c4e:	bf00      	nop
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bc80      	pop	{r7}
 8002c56:	4770      	bx	lr

08002c58 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f043 0307 	orr.w	r3, r3, #7
 8002c7a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	609a      	str	r2, [r3, #8]
}
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	021a      	lsls	r2, r3, #8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bc80      	pop	{r7}
 8002cc8:	4770      	bx	lr

08002cca <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b087      	sub	sp, #28
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	2201      	movs	r2, #1
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a1a      	ldr	r2, [r3, #32]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	401a      	ands	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6a1a      	ldr	r2, [r3, #32]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	431a      	orrs	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	621a      	str	r2, [r3, #32]
}
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr
	...

08002d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d101      	bne.n	8002d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d28:	2302      	movs	r3, #2
 8002d2a:	e041      	b.n	8002db0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68fa      	ldr	r2, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d009      	beq.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d78:	d004      	beq.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10c      	bne.n	8002d9e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40012c00 	.word	0x40012c00
 8002dc0:	40000400 	.word	0x40000400

08002dc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr

08002de8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e042      	b.n	8002e80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7fd fc82 	bl	8000718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2224      	movs	r2, #36	; 0x24
 8002e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fd71 	bl	8003914 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	; 0x28
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	4613      	mov	r3, r2
 8002e96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d16d      	bne.n	8002f84 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_UART_Transmit+0x2c>
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e066      	b.n	8002f86 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2221      	movs	r2, #33	; 0x21
 8002ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ec6:	f7fd fd97 	bl	80009f8 <HAL_GetTick>
 8002eca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	88fa      	ldrh	r2, [r7, #6]
 8002ed0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	88fa      	ldrh	r2, [r7, #6]
 8002ed6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee0:	d108      	bne.n	8002ef4 <HAL_UART_Transmit+0x6c>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d104      	bne.n	8002ef4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	e003      	b.n	8002efc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002efc:	e02a      	b.n	8002f54 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2200      	movs	r2, #0
 8002f06:	2180      	movs	r1, #128	; 0x80
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 faf9 	bl	8003500 <UART_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e036      	b.n	8002f86 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10b      	bne.n	8002f36 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	3302      	adds	r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	e007      	b.n	8002f46 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	3301      	adds	r3, #1
 8002f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1cf      	bne.n	8002efe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2200      	movs	r2, #0
 8002f66:	2140      	movs	r1, #64	; 0x40
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fac9 	bl	8003500 <UART_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e006      	b.n	8002f86 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e000      	b.n	8002f86 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0ba      	sub	sp, #232	; 0xe8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x66>
 8002fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fbd1 	bl	8003796 <UART_Receive_IT>
      return;
 8002ff4:	e25b      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80de 	beq.w	80031bc <HAL_UART_IRQHandler+0x22c>
 8003000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d106      	bne.n	800301a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800300c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003010:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80d1 	beq.w	80031bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800301a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_UART_IRQHandler+0xae>
 8003026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800302a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302e:	2b00      	cmp	r3, #0
 8003030:	d005      	beq.n	800303e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f043 0201 	orr.w	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_UART_IRQHandler+0xd2>
 800304a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00b      	beq.n	8003086 <HAL_UART_IRQHandler+0xf6>
 800306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307e:	f043 0204 	orr.w	r2, r3, #4
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 0308 	and.w	r3, r3, #8
 800308e:	2b00      	cmp	r3, #0
 8003090:	d011      	beq.n	80030b6 <HAL_UART_IRQHandler+0x126>
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d105      	bne.n	80030aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800309e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f043 0208 	orr.w	r2, r3, #8
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 81f2 	beq.w	80034a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_UART_IRQHandler+0x14e>
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 fb5c 	bl	8003796 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	bf14      	ite	ne
 80030ec:	2301      	movne	r3, #1
 80030ee:	2300      	moveq	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d103      	bne.n	800310a <HAL_UART_IRQHandler+0x17a>
 8003102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d04f      	beq.n	80031aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa66 	bl	80035dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800311a:	2b00      	cmp	r3, #0
 800311c:	d041      	beq.n	80031a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	3314      	adds	r3, #20
 8003124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800313c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	3314      	adds	r3, #20
 8003146:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800314a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800314e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003152:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003156:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003162:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1d9      	bne.n	800311e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d013      	beq.n	800319a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	4a7e      	ldr	r2, [pc, #504]	; (8003370 <HAL_UART_IRQHandler+0x3e0>)
 8003178:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd fdb0 	bl	8000ce4 <HAL_DMA_Abort_IT>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d016      	beq.n	80031b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003194:	4610      	mov	r0, r2
 8003196:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003198:	e00e      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f99c 	bl	80034d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	e00a      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f998 	bl	80034d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a8:	e006      	b.n	80031b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f994 	bl	80034d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80031b6:	e175      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b8:	bf00      	nop
    return;
 80031ba:	e173      	b.n	80034a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 814f 	bne.w	8003464 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 8148 	beq.w	8003464 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 8141 	beq.w	8003464 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031e2:	2300      	movs	r3, #0
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80b6 	beq.w	8003374 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003214:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 8145 	beq.w	80034a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003226:	429a      	cmp	r2, r3
 8003228:	f080 813e 	bcs.w	80034a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003232:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	2b20      	cmp	r3, #32
 800323c:	f000 8088 	beq.w	8003350 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	330c      	adds	r3, #12
 8003246:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003256:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800325a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800325e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	330c      	adds	r3, #12
 8003268:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800326c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003270:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003274:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003278:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003284:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1d9      	bne.n	8003240 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3314      	adds	r3, #20
 8003292:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003296:	e853 3f00 	ldrex	r3, [r3]
 800329a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800329c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3314      	adds	r3, #20
 80032ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032bc:	e841 2300 	strex	r3, r2, [r1]
 80032c0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e1      	bne.n	800328c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	3314      	adds	r3, #20
 80032ce:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032d2:	e853 3f00 	ldrex	r3, [r3]
 80032d6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	3314      	adds	r3, #20
 80032e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032ec:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032f2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032f4:	e841 2300 	strex	r3, r2, [r1]
 80032f8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1e3      	bne.n	80032c8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800331e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003320:	f023 0310 	bic.w	r3, r3, #16
 8003324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003332:	65ba      	str	r2, [r7, #88]	; 0x58
 8003334:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e3      	bne.n	800330e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd fc8f 	bl	8000c6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800335e:	b29b      	uxth	r3, r3
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	b29b      	uxth	r3, r3
 8003364:	4619      	mov	r1, r3
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f8bf 	bl	80034ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800336c:	e09c      	b.n	80034a8 <HAL_UART_IRQHandler+0x518>
 800336e:	bf00      	nop
 8003370:	080036a1 	.word	0x080036a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800337c:	b29b      	uxth	r3, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 808e 	beq.w	80034ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003390:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8089 	beq.w	80034ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	330c      	adds	r3, #12
 80033ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033be:	647a      	str	r2, [r7, #68]	; 0x44
 80033c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033c6:	e841 2300 	strex	r3, r2, [r1]
 80033ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e3      	bne.n	800339a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	623b      	str	r3, [r7, #32]
   return(result);
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3314      	adds	r3, #20
 80033f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033f6:	633a      	str	r2, [r7, #48]	; 0x30
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033fe:	e841 2300 	strex	r3, r2, [r1]
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1e3      	bne.n	80033d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	330c      	adds	r3, #12
 800341e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	60fb      	str	r3, [r7, #12]
   return(result);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0310 	bic.w	r3, r3, #16
 800342e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800343c:	61fa      	str	r2, [r7, #28]
 800343e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	69b9      	ldr	r1, [r7, #24]
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	617b      	str	r3, [r7, #20]
   return(result);
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e3      	bne.n	8003418 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2202      	movs	r2, #2
 8003454:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003456:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 f844 	bl	80034ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003462:	e023      	b.n	80034ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800346c:	2b00      	cmp	r3, #0
 800346e:	d009      	beq.n	8003484 <HAL_UART_IRQHandler+0x4f4>
 8003470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f923 	bl	80036c8 <UART_Transmit_IT>
    return;
 8003482:	e014      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00e      	beq.n	80034ae <HAL_UART_IRQHandler+0x51e>
 8003490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d008      	beq.n	80034ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f962 	bl	8003766 <UART_EndTransmit_IT>
    return;
 80034a2:	e004      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
    return;
 80034a4:	bf00      	nop
 80034a6:	e002      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
      return;
 80034a8:	bf00      	nop
 80034aa:	e000      	b.n	80034ae <HAL_UART_IRQHandler+0x51e>
      return;
 80034ac:	bf00      	nop
  }
}
 80034ae:	37e8      	adds	r7, #232	; 0xe8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034c6:	b480      	push	{r7}
 80034c8:	b083      	sub	sp, #12
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	460b      	mov	r3, r1
 80034f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b090      	sub	sp, #64	; 0x40
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	603b      	str	r3, [r7, #0]
 800350c:	4613      	mov	r3, r2
 800350e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003510:	e050      	b.n	80035b4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d04c      	beq.n	80035b4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800351a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <UART_WaitOnFlagUntilTimeout+0x30>
 8003520:	f7fd fa6a 	bl	80009f8 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800352c:	429a      	cmp	r2, r3
 800352e:	d241      	bcs.n	80035b4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	330c      	adds	r3, #12
 8003536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	330c      	adds	r3, #12
 800354e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003550:	637a      	str	r2, [r7, #52]	; 0x34
 8003552:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800355e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e5      	bne.n	8003530 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3314      	adds	r3, #20
 800356a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	e853 3f00 	ldrex	r3, [r3]
 8003572:	613b      	str	r3, [r7, #16]
   return(result);
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	f023 0301 	bic.w	r3, r3, #1
 800357a:	63bb      	str	r3, [r7, #56]	; 0x38
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	3314      	adds	r3, #20
 8003582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003584:	623a      	str	r2, [r7, #32]
 8003586:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	69f9      	ldr	r1, [r7, #28]
 800358a:	6a3a      	ldr	r2, [r7, #32]
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	61bb      	str	r3, [r7, #24]
   return(result);
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e5      	bne.n	8003564 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e00f      	b.n	80035d4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	68ba      	ldr	r2, [r7, #8]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	461a      	mov	r2, r3
 80035cc:	79fb      	ldrb	r3, [r7, #7]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d09f      	beq.n	8003512 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3740      	adds	r7, #64	; 0x40
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035dc:	b480      	push	{r7}
 80035de:	b095      	sub	sp, #84	; 0x54
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	330c      	adds	r3, #12
 8003602:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003604:	643a      	str	r2, [r7, #64]	; 0x40
 8003606:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800360a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800360c:	e841 2300 	strex	r3, r2, [r1]
 8003610:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e5      	bne.n	80035e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3314      	adds	r3, #20
 800361e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	e853 3f00 	ldrex	r3, [r3]
 8003626:	61fb      	str	r3, [r7, #28]
   return(result);
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f023 0301 	bic.w	r3, r3, #1
 800362e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3314      	adds	r3, #20
 8003636:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003638:	62fa      	str	r2, [r7, #44]	; 0x2c
 800363a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800363e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003640:	e841 2300 	strex	r3, r2, [r1]
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1e5      	bne.n	8003618 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	2b01      	cmp	r3, #1
 8003652:	d119      	bne.n	8003688 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	60bb      	str	r3, [r7, #8]
   return(result);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	f023 0310 	bic.w	r3, r3, #16
 800366a:	647b      	str	r3, [r7, #68]	; 0x44
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003674:	61ba      	str	r2, [r7, #24]
 8003676:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6979      	ldr	r1, [r7, #20]
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	613b      	str	r3, [r7, #16]
   return(result);
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e5      	bne.n	8003654 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003696:	bf00      	nop
 8003698:	3754      	adds	r7, #84	; 0x54
 800369a:	46bd      	mov	sp, r7
 800369c:	bc80      	pop	{r7}
 800369e:	4770      	bx	lr

080036a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff ff0c 	bl	80034d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b21      	cmp	r3, #33	; 0x21
 80036da:	d13e      	bne.n	800375a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e4:	d114      	bne.n	8003710 <UART_Transmit_IT+0x48>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d110      	bne.n	8003710 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003702:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	1c9a      	adds	r2, r3, #2
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	621a      	str	r2, [r3, #32]
 800370e:	e008      	b.n	8003722 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	1c59      	adds	r1, r3, #1
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6211      	str	r1, [r2, #32]
 800371a:	781a      	ldrb	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29b      	uxth	r3, r3
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	4619      	mov	r1, r3
 8003730:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003744:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003754:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	e000      	b.n	800375c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800375a:	2302      	movs	r3, #2
  }
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800377c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fe94 	bl	80034b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b08c      	sub	sp, #48	; 0x30
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b22      	cmp	r3, #34	; 0x22
 80037a8:	f040 80ae 	bne.w	8003908 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b4:	d117      	bne.n	80037e6 <UART_Receive_IT+0x50>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d113      	bne.n	80037e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037de:	1c9a      	adds	r2, r3, #2
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	629a      	str	r2, [r3, #40]	; 0x28
 80037e4:	e026      	b.n	8003834 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037f8:	d007      	beq.n	800380a <UART_Receive_IT+0x74>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10a      	bne.n	8003818 <UART_Receive_IT+0x82>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d106      	bne.n	8003818 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e008      	b.n	800382a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003824:	b2da      	uxtb	r2, r3
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29b      	uxth	r3, r3
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	4619      	mov	r1, r3
 8003842:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003844:	2b00      	cmp	r3, #0
 8003846:	d15d      	bne.n	8003904 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0220 	bic.w	r2, r2, #32
 8003856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68da      	ldr	r2, [r3, #12]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003866:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	2b01      	cmp	r3, #1
 800388c:	d135      	bne.n	80038fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	e853 3f00 	ldrex	r3, [r3]
 80038a2:	613b      	str	r3, [r7, #16]
   return(result);
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f023 0310 	bic.w	r3, r3, #16
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	330c      	adds	r3, #12
 80038b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b4:	623a      	str	r2, [r7, #32]
 80038b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b8:	69f9      	ldr	r1, [r7, #28]
 80038ba:	6a3a      	ldr	r2, [r7, #32]
 80038bc:	e841 2300 	strex	r3, r2, [r1]
 80038c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1e5      	bne.n	8003894 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0310 	and.w	r3, r3, #16
 80038d2:	2b10      	cmp	r3, #16
 80038d4:	d10a      	bne.n	80038ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038d6:	2300      	movs	r3, #0
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038f0:	4619      	mov	r1, r3
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f7ff fdf9 	bl	80034ea <HAL_UARTEx_RxEventCallback>
 80038f8:	e002      	b.n	8003900 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff fde3 	bl	80034c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	e002      	b.n	800390a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003904:	2300      	movs	r3, #0
 8003906:	e000      	b.n	800390a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003908:	2302      	movs	r3, #2
  }
}
 800390a:	4618      	mov	r0, r3
 800390c:	3730      	adds	r7, #48	; 0x30
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	4313      	orrs	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800394e:	f023 030c 	bic.w	r3, r3, #12
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	430b      	orrs	r3, r1
 800395a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2c      	ldr	r2, [pc, #176]	; (8003a28 <UART_SetConfig+0x114>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d103      	bne.n	8003984 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800397c:	f7fd ff9c 	bl	80018b8 <HAL_RCC_GetPCLK2Freq>
 8003980:	60f8      	str	r0, [r7, #12]
 8003982:	e002      	b.n	800398a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003984:	f7fd ff84 	bl	8001890 <HAL_RCC_GetPCLK1Freq>
 8003988:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009a      	lsls	r2, r3, #2
 8003994:	441a      	add	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a0:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <UART_SetConfig+0x118>)
 80039a2:	fba2 2303 	umull	r2, r3, r2, r3
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	0119      	lsls	r1, r3, #4
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	009a      	lsls	r2, r3, #2
 80039b4:	441a      	add	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c0:	4b1a      	ldr	r3, [pc, #104]	; (8003a2c <UART_SetConfig+0x118>)
 80039c2:	fba3 0302 	umull	r0, r3, r3, r2
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	2064      	movs	r0, #100	; 0x64
 80039ca:	fb00 f303 	mul.w	r3, r0, r3
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	3332      	adds	r3, #50	; 0x32
 80039d4:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <UART_SetConfig+0x118>)
 80039d6:	fba2 2303 	umull	r2, r3, r2, r3
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e0:	4419      	add	r1, r3
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009a      	lsls	r2, r3, #2
 80039ec:	441a      	add	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <UART_SetConfig+0x118>)
 80039fa:	fba3 0302 	umull	r0, r3, r3, r2
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2064      	movs	r0, #100	; 0x64
 8003a02:	fb00 f303 	mul.w	r3, r0, r3
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	3332      	adds	r3, #50	; 0x32
 8003a0c:	4a07      	ldr	r2, [pc, #28]	; (8003a2c <UART_SetConfig+0x118>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	440a      	add	r2, r1
 8003a1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	51eb851f 	.word	0x51eb851f

08003a30 <__libc_init_array>:
 8003a30:	b570      	push	{r4, r5, r6, lr}
 8003a32:	2600      	movs	r6, #0
 8003a34:	4d0c      	ldr	r5, [pc, #48]	; (8003a68 <__libc_init_array+0x38>)
 8003a36:	4c0d      	ldr	r4, [pc, #52]	; (8003a6c <__libc_init_array+0x3c>)
 8003a38:	1b64      	subs	r4, r4, r5
 8003a3a:	10a4      	asrs	r4, r4, #2
 8003a3c:	42a6      	cmp	r6, r4
 8003a3e:	d109      	bne.n	8003a54 <__libc_init_array+0x24>
 8003a40:	f000 f822 	bl	8003a88 <_init>
 8003a44:	2600      	movs	r6, #0
 8003a46:	4d0a      	ldr	r5, [pc, #40]	; (8003a70 <__libc_init_array+0x40>)
 8003a48:	4c0a      	ldr	r4, [pc, #40]	; (8003a74 <__libc_init_array+0x44>)
 8003a4a:	1b64      	subs	r4, r4, r5
 8003a4c:	10a4      	asrs	r4, r4, #2
 8003a4e:	42a6      	cmp	r6, r4
 8003a50:	d105      	bne.n	8003a5e <__libc_init_array+0x2e>
 8003a52:	bd70      	pop	{r4, r5, r6, pc}
 8003a54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a58:	4798      	blx	r3
 8003a5a:	3601      	adds	r6, #1
 8003a5c:	e7ee      	b.n	8003a3c <__libc_init_array+0xc>
 8003a5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a62:	4798      	blx	r3
 8003a64:	3601      	adds	r6, #1
 8003a66:	e7f2      	b.n	8003a4e <__libc_init_array+0x1e>
 8003a68:	08003ae8 	.word	0x08003ae8
 8003a6c:	08003ae8 	.word	0x08003ae8
 8003a70:	08003ae8 	.word	0x08003ae8
 8003a74:	08003aec 	.word	0x08003aec

08003a78 <memset>:
 8003a78:	4603      	mov	r3, r0
 8003a7a:	4402      	add	r2, r0
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d100      	bne.n	8003a82 <memset+0xa>
 8003a80:	4770      	bx	lr
 8003a82:	f803 1b01 	strb.w	r1, [r3], #1
 8003a86:	e7f9      	b.n	8003a7c <memset+0x4>

08003a88 <_init>:
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8a:	bf00      	nop
 8003a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8e:	bc08      	pop	{r3}
 8003a90:	469e      	mov	lr, r3
 8003a92:	4770      	bx	lr

08003a94 <_fini>:
 8003a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a96:	bf00      	nop
 8003a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9a:	bc08      	pop	{r3}
 8003a9c:	469e      	mov	lr, r3
 8003a9e:	4770      	bx	lr
